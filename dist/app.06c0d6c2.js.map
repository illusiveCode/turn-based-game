{"version":3,"sources":["js/player.js","js/assets.js","js/game.js","js/app.js"],"names":["Player","name","image","weapon","lastId","id","damage","oldWeapon","lifePoints","location","row","column","shield","weapons","weapon2","weapon3","Game","players","document","querySelector","classList","remove","map","player","innerHTML","reset","i","placeItem","barrier","currentPlayer","Math","floor","random","length","detectTurn","cls","item","randomSquare","gridSquares","dataset","contains","getPlayerDistance","p1c","p1r","yDistance","abs","xDistance","y","x","getObstacleDistance","elm","r1","r2","r3","r4","c1","c2","c3","c4","r1c1","r2c2","r3c3","r4c4","add","element","direction","num","Number","availability","move1","move2","move3","addEventListener","movePlayer","e","oldPosition","newPosition","target","nodeName","path","outerHTML","detectRetaliation","retaliation","changeTurn","querySelectorAll","removeEventListener","north","south","east","west","attacker","opponent","retaliationModal","setTimeout","defend","attack","run","health","console","log","shieldStatus","tile","gameOver","highlightMoves","once","col","weapon0","weapon1","generateMap","newGame","$","removeClass","player1","ironman","generate","player2","capShield","wDetails","html","append","on","addClass"],"mappings":"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","file":"app.06c0d6c2.js","sourceRoot":"..","sourcesContent":["class Player {\n  constructor(name, image, weapon, lastId = 0) {\n      this.id = lastId + 1;\n      this.name = name;\n      this.image = image;\n      this.weapon = weapon;\n  }\n\n  // Generating players with their inital stats\n  generate = () => {\n      return {\n          id: this.id,\n          name: this.name,\n          image: `<img src=\"${this.image}\" alt=\"${this.name}\" />`,\n          weapon: {\n              image: `<img src=\"${this.weapon}\" alt=\"\" data-damage=\"10\" />`,\n              damage: 10,\n              oldWeapon: \"\",\n          },\n          lifePoints: 100,\n          location: {\n              row: 0,\n              column: 0,\n          },\n          shield: false,\n      };\n  };\n}\n\nexport default Player;\n","import capShield from \"../images/cap-avatar.png\";\nimport ironman from \"../images/iron-avatar.png\";\nimport weapon0 from \"../images/space-stone.png\";\nimport weapon1 from \"../images/power-stone.png\";\nimport weapon2 from \"../images/soul-stone.png\";\nimport weapon3 from \"../images/gauntlet.png\";\nimport barrier from \"../images/barrier.png\";\n\nconst weapons = [weapon2, weapon3];\n\nexport { capShield, ironman, weapons, weapon0, weapon1, weapon2, weapon3, barrier };\n","import { weapons, barrier } from \"./assets\";\n\nclass Game {\n    constructor(players) {\n        this.players = players;\n        this.gridSquares = document.querySelectorAll(\".grid-item\");\n        this.currentPlayer = null;\n    }\n\n    /*FUNCTION TO RESET THE GAME*/\n    reset = () => {\n        document.querySelector(\"#gameOverModal\").classList.remove(\"open\");\n\n        this.players.map((player) => {\n            document.querySelector(`#name${player.id}`).innerHTML = player.name;\n\n            document.querySelector(`#health${player.id}`).innerHTML = player.lifePoints;\n\n            document.querySelector(`#weapon${player.id}`).innerHTML = player.weapon.image;\n\n            document.querySelector(`#damage${player.id}`).innerHTML = player.weapon.damage;\n\n            document.querySelector(`#shield${player.id}`).innerHTML = \"Unprotected\";\n        });\n    };\n\n    // calling function to reset the game\n    newGame = () => {\n        this.reset();\n\n        for (let i = 0; i < 12; i++) {\n            this.placeItem(\"barrier\", `<img src=${barrier} alt=\"\" />`);\n        }\n\n        let damage = 10;\n        for (const weapon of weapons) {\n            damage += 10;\n            this.placeItem(\"weapon\", `<img src=${weapon} alt=\"\" data-damage=\"${damage}\" />`);\n        }\n\n        this.players.map((player) => {\n            this.placeItem(\"player\", player);\n        });\n\n        this.currentPlayer = this.players[Math.floor(Math.random() * this.players.length)];\n\n        this.detectTurn();\n    };\n\n    // creating the map of the game\n    static generateMap = () => {\n        const map = document.querySelector(\"#game-board\");\n\n        let col = 0;\n        let row = 1;\n\n        map.innerHTML = \"\";\n\n        for (let column = 0; column < 81; column++) {\n            col++;\n\n            map.innerHTML += `<div class='grid-item' data-row=${row} data-column=${col}></div>`;\n\n            if (col === 9) {\n                col = 0;\n                row++;\n            }\n        }\n    };\n\n    placeItem = (cls, item) => {\n        const randomSquare = Math.floor(Math.random() * this.gridSquares.length);\n\n        const { column, row } = this.gridSquares[randomSquare].dataset;\n\n        const getObstacleDistance = (row, column) => {\n            const elm = document.querySelector(`[data-row=\"${row}\"][data-column=\"${column}\"]`);\n\n            const r1 = document.querySelector(`[data-row=\"${row - 1}\"][data-column=\"${column}\"]`);\n            const r2 = document.querySelector(`[data-row=\"${row - 2}\"][data-column=\"${column}\"]`);\n            const r3 = document.querySelector(`[data-row=\"${row + 1}\"][data-column=\"${column}\"]`);\n            const r4 = document.querySelector(`[data-row=\"${row + 2}\"][data-column=\"${column}\"]`);\n\n            const c1 = document.querySelector(`[data-column=\"${column - 1}\"][data-row=\"${row}\"]`);\n            const c2 = document.querySelector(`[data-column=\"${column - 2}\"][data-row=\"${row}\"]`);\n            const c3 = document.querySelector(`[data-column=\"${column + 1}\"][data-row=\"${row}\"]`);\n            const c4 = document.querySelector(`[data-column=\"${column + 2}\"][data-row=\"${row}\"]`);\n\n            if (r1 && r1.classList.contains(\"barrier\")) return true;\n            if (r2 && r2.classList.contains(\"barrier\")) return true;\n            if (r3 && r3.classList.contains(\"barrier\")) return true;\n            if (r4 && r4.classList.contains(\"barrier\")) return true;\n\n            if (c1 && c1.classList.contains(\"barrier\")) return true;\n            if (c2 && c2.classList.contains(\"barrier\")) return true;\n            if (c3 && c3.classList.contains(\"barrier\")) return true;\n            if (c4 && c4.classList.contains(\"barrier\")) return true;\n\n            const r1c1 = document.querySelector(`[data-row=\"${row + 1}\"][data-column=\"${column + 1}\"]`);\n\n            const r2c2 = document.querySelector(`[data-row=\"${row - 1}\"][data-column=\"${column - 1}\"]`);\n\n            const r3c3 = document.querySelector(`[data-row=\"${row - 1}\"][data-column=\"${column + 1}\"]`);\n\n            const r4c4 = document.querySelector(`[data-row=\"${row + 1}\"][data-column=\"${column - 1}\"]`);\n\n            if (r1c1 && r1c1.classList.contains(\"barrier\")) return true;\n            if (r2c2 && r2c2.classList.contains(\"barrier\")) return true;\n            if (r3c3 && r3c3.classList.contains(\"barrier\")) return true;\n            if (r4c4 && r4c4.classList.contains(\"barrier\")) return true;\n        };\n\n        const getPlayerDistance = (row, column) => {\n            if (this.players[0].location.row > 0) {\n                const p1c = +this.players[0].location.column;\n                const p1r = +this.players[0].location.row;\n\n                const yDistance = Math.abs(p1r - row);\n                const xDistance = Math.abs(p1c - column);\n\n                // Check if P1 is in same column and less than 4 steps away from P2\n                if (p1c === column && yDistance <= 4) {\n                    // Check if there's a barrier between two players\n                    for (let i = 1; i <= yDistance; i++) {\n                        if (p1r > row) {\n                            const y = document.querySelector(`[data-row=\"${p1r - i}\"][data-column=\"${p1c}\"]`);\n                            if (y && y.classList.contains(\"barrier\")) return false;\n                        } else {\n                            const y = document.querySelector(`[data-row=\"${p1r + i}\"][data-column=\"${p1c}\"]`);\n                            if (y && y.classList.contains(\"barrier\")) return false;\n                        }\n                    }\n\n                    return true;\n                }\n\n                // Check if P1 is in same row and less than 4 steps away from P2\n                if (p1r === row && xDistance <= 4) {\n                    // Check if there's a barrier between two players\n                    for (let i = 1; i <= xDistance; i++) {\n                        if (p1c > column) {\n                            const x = document.querySelector(`[data-row=\"${p1r}\"][data-column=\"${p1c - i}\"]`);\n                            if (x && x.classList.contains(\"barrier\")) return false;\n                        } else {\n                            const x = document.querySelector(`[data-row=\"${p1r}\"][data-column=\"${p1c + i}\"]`);\n                            if (x && x.classList.contains(\"barrier\")) return false;\n                        }\n                    }\n\n                    return true;\n                }\n\n                if ((xDistance === 1 && yDistance <= 4) || (yDistance === 1 && xDistance <= 3)) return true;\n            }\n        };\n\n        if (this.gridSquares[randomSquare].classList.contains(\"occupied\")) return this.placeItem(cls, item);\n\n        if (cls === \"player\") {\n            if (getPlayerDistance(+row, +column)) return this.placeItem(cls, item);\n\n            this.players[item.id - 1].location = { column, row };\n\n            this.gridSquares[randomSquare].innerHTML = item.image;\n        } else if (cls === \"barrier\") {\n            if (getObstacleDistance(+row, +column)) return this.placeItem(cls, item);\n\n            // console.log({ r, c });\n\n            // if (r && c) return this.placeItem(cls, item);\n\n            this.gridSquares[randomSquare].innerHTML = item;\n        } else {\n            this.gridSquares[randomSquare].innerHTML = item;\n        }\n\n        this.gridSquares[randomSquare].classList.add(cls);\n        this.gridSquares[randomSquare].classList.add(\"occupied\");\n    };\n\n    // highlight tiles for valid moves for current player\n    highlightMoves = () => {\n        const { row, column } = this.currentPlayer.location;\n\n        const element = (direction, num) => {\n            switch (direction) {\n                case \"north\":\n                    return document.querySelector(`[data-row=\"${row - num}\"][data-column=\"${column}\"]`);\n                case \"south\":\n                    return document.querySelector(`[data-row=\"${Number(row) + num}\"][data-column=\"${column}\"]`);\n                case \"west\":\n                    return document.querySelector(`[data-row=\"${row}\"][data-column=\"${Number(column) - num}\"]`);\n                case \"east\":\n                    return document.querySelector(`[data-row=\"${row}\"][data-column=\"${Number(column) + num}\"]`);\n                default:\n                    break;\n            }\n        };\n\n        const availability = (direction) => {\n            const move1 = element(direction, 1);\n            const move2 = element(direction, 2);\n            const move3 = element(direction, 3);\n\n            if (!move1) return;\n            if (move1.classList.contains(\"barrier\") || move1.classList.contains(\"player\")) return;\n            move1.classList.add(\"highlight\");\n            move1.addEventListener(\"click\", this.movePlayer);\n\n            if (!move2) return;\n            if (move2.classList.contains(\"barrier\") || move2.classList.contains(\"player\")) return;\n            move2.classList.add(\"highlight\");\n            move2.addEventListener(\"click\", this.movePlayer);\n\n            if (!move3) return;\n            if (move3.classList.contains(\"barrier\") || move3.classList.contains(\"player\")) return;\n            move3.classList.add(\"highlight\");\n            move3.addEventListener(\"click\", this.movePlayer);\n        };\n\n        availability(\"north\");\n        availability(\"south\");\n        availability(\"west\");\n        availability(\"east\");\n    };\n\n    movePlayer = (e) => {\n        const oldPosition = document.querySelector(`[data-row=\"${this.currentPlayer.location.row}\"][data-column=\"${this.currentPlayer.location.column}\"]`);\n\n        const newPosition = e.target.nodeName === \"IMG\" ? e.path[1] : e.target;\n        const player = this.players[this.currentPlayer.id - 1];\n\n        //remove image from old location\n        if (this.currentPlayer.weapon.oldWeapon) {\n            oldPosition.innerHTML = this.currentPlayer.weapon.oldWeapon;\n            oldPosition.classList.add(\"weapon\");\n\n            player.weapon.oldWeapon = null;\n        } else {\n            oldPosition.innerHTML = \"\";\n        }\n\n        oldPosition.classList.remove(\"player\");\n        //add image to new location\n\n        const { row, column } = newPosition.dataset;\n        if (e.target.nodeName === \"IMG\") {\n            newPosition.innerHTML = this.currentPlayer.image;\n            newPosition.classList.add(\"player\");\n\n            const image = e.target.outerHTML;\n            const damage = e.target.dataset.damage;\n\n            document.querySelector(`#weapon${this.currentPlayer.id}`).innerHTML = image;\n\n            document.querySelector(`#damage${this.currentPlayer.id}`).innerHTML = damage;\n\n            //change player location\n            player.location = { row, column };\n\n            player.weapon = {\n                image,\n                damage,\n                oldWeapon: this.currentPlayer.weapon.image,\n            };\n        } else {\n            newPosition.innerHTML = this.currentPlayer.image;\n            newPosition.classList.add(\"player\");\n            //change player location\n            player.location = { row, column };\n        }\n\n        this.players[this.currentPlayer.id - 1] = player;\n\n        if (this.detectRetaliation(column, row)) {\n            this.retaliation();\n        } else {\n            this.changeTurn();\n        }\n\n        //REMOVE HIGHLIGHTS OF MOVES AND CLICK EVENTLISTENER FROM PREVIOUS AVAILABLE MOVES\n        for (const elm of document.querySelectorAll(\".highlight\")) {\n            elm.classList.remove(\"highlight\");\n            elm.removeEventListener(\"click\", this.movePlayer);\n        }\n    };\n\n    detectRetaliation = (column, row) => {\n        const north = document.querySelector(`[data-row=\"${row - 1}\"][data-column=\"${column}\"]`);\n        const south = document.querySelector(`[data-row=\"${Number(row) + 1}\"][data-column=\"${column}\"]`);\n        const east = document.querySelector(`[data-row=\"${row}\"][data-column=\"${Number(column) + 1}\"]`);\n        const west = document.querySelector(`[data-row=\"${row}\"][data-column=\"${column - 1}\"]`);\n\n        if (north && north.classList.contains(\"player\")) return true;\n        if (south && south.classList.contains(\"player\")) return true;\n        if (east && east.classList.contains(\"player\")) return true;\n        if (west && west.classList.contains(\"player\")) return true;\n    };\n\n    retaliation = () => {\n        const attacker = this.currentPlayer;\n        this.currentPlayer = attacker.id === 1 ? this.players[1] : this.players[0];\n\n        const opponent = this.currentPlayer;\n\n        // UPDATE PLAYER PANELS HIGHLIGHT \n        document.querySelector(`#player${attacker.id}`).classList.remove(\"current\");\n        document.querySelector(`#player${opponent.id}`).classList.add(\"current\");\n\n        const retaliationModal = document.querySelector(\"#retaliationModal\");\n\n        setTimeout(() => {\n            retaliationModal.classList.add(\"open\");\n        }, 500);\n\n        document.querySelector(\"#retaliationModal .avatar\").innerHTML = opponent.image;\n\n        // DEFEND?\n        const defend = () => {\n            document.querySelector(\"#attack\").removeEventListener(\"click\", attack);\n            document.querySelector(\"#run\").removeEventListener(\"click\", run);\n            const health = opponent.lifePoints - attacker.weapon.damage / 2;\n\n            this.players[opponent.id - 1].lifePoints = health;\n            console.log(\"defend\", opponent.id, health);\n\n            document.querySelector(`#health${opponent.id}`).innerHTML = health;\n\n            const shieldStatus = document.querySelector(`#shield${opponent.id}`);\n            shieldStatus.innerHTML = \"Protected\";\n            shieldStatus.classList.add(\"protected\");\n\n            document.querySelector(`#health${opponent.id}`).innerHTML = health;\n\n            retaliationModal.classList.remove(\"open\");\n\n            // REMOVE HIGHLIGHTS\n            for (const tile of document.querySelectorAll(\".highlight\")) {\n                tile.classList.remove(\"highlight\");\n                tile.removeEventListener(\"click\", this.movePlayer);\n            }\n\n            if (this.gameOver(opponent, attacker)) return;\n\n            this.retaliation();\n        };\n\n        // DEFEND AND RUN?\n        const run = () => {\n            document.querySelector(\"#attack\").removeEventListener(\"click\", attack);\n            document.querySelector(\"#defend\").removeEventListener(\"click\", defend);\n            const health = opponent.lifePoints - attacker.weapon.damage / 2;\n\n            this.players[opponent.id - 1].lifePoints = health;\n            console.log(\"defend\", opponent.id, health);\n\n            document.querySelector(`#health${opponent.id}`).innerHTML = health;\n\n            const shieldStatus = document.querySelector(`#shield${opponent.id}`);\n            shieldStatus.innerHTML = \"Protected\";\n            shieldStatus.classList.add(\"protected\");\n\n            document.querySelector(`#health${opponent.id}`).innerHTML = health;\n\n            retaliationModal.classList.remove(\"open\");\n\n            // REMOVE HIGHLIGHTS\n            for (const tile of document.querySelectorAll(\".highlight\")) {\n                tile.classList.remove(\"highlight\");\n                tile.removeEventListener(\"click\", this.movePlayer);\n            }\n\n            if (this.gameOver(opponent, attacker)) return;\n\n            this.highlightMoves();\n        };\n        // ATTACK?\n        const attack = () => {\n            document.querySelector(\"#defend\").removeEventListener(\"click\", defend);\n            document.querySelector(\"#run\").removeEventListener(\"click\", run);\n            const health = opponent.lifePoints - attacker.weapon.damage;\n            console.log(\"attack\", opponent.id, health);\n\n            retaliationModal.classList.remove(\"open\");\n\n            this.players[opponent.id - 1].lifePoints = health;\n            document.querySelector(`#health${opponent.id}`).innerHTML = health;\n\n            const shieldStatus = document.querySelector(`#shield${opponent.id}`);\n            shieldStatus.innerHTML = \"Unprotected\";\n            shieldStatus.classList.remove(\"protected\");\n\n            // REMOVE HIGHLIGHTS\n            for (const tile of document.querySelectorAll(\".highlight\")) {\n                tile.classList.remove(\"highlight\");\n                tile.removeEventListener(\"click\", this.movePlayer);\n            }\n\n            if (this.gameOver(opponent, attacker)) return;\n\n            this.retaliation();\n        };\n\n        document.querySelector(\"#attack\").addEventListener(\"click\", attack, { once: true });\n        document.querySelector(\"#defend\").addEventListener(\"click\", defend, { once: true });\n        document.querySelector(\"#run\").addEventListener(\"click\", run, { once: true });\n    };\n\n    gameOver = (opponent, attacker) => {\n        if (opponent.lifePoints <= 0) {\n            document.querySelector(\"#retaliationModal\").classList.remove(\"open\");\n            document.querySelector(\"#gameOverModal\").classList.add(\"open\");\n\n            document.querySelector(\"#gameOverModal p:first-of-type\").innerHTML = `${attacker.name}, you are the winner 🎊`;\n            document.querySelector(\"#gameOverModal p:last-of-type\").innerHTML = `${opponent.name}, you are the loser 👎`;\n\n            return true;\n        }\n    };\n\n    detectTurn = () => {\n        document.querySelector(`#player${this.currentPlayer.id}`).classList.add(\"current\");\n\n        setTimeout(this.highlightMoves, 500);\n    };\n\n    changeTurn = () => {\n        for (const elm of document.querySelectorAll(\".sidebar\")) {\n            elm.classList.remove(\"current\");\n        }\n\n        if (this.currentPlayer.id === 1) {\n            this.currentPlayer = this.players[1];\n        } else {\n            this.currentPlayer = this.players[0];\n        }\n\n        this.detectTurn();\n    };\n}\n\nexport default Game;\n","import Player from \"./player\";\nimport Game from \"./game\";\n\nimport { capShield, ironman, weapon0, weapon1, weapon2, weapon3 } from \"./assets\";\n\nconst weapons = [weapon0, weapon1, weapon2, weapon3];\n\nGame.generateMap();\n\nconst newGame = () => {\n    $(\"#gameOverModal\").removeClass(\"open\");\n\n    const player1 = new Player(\"Ironman\", ironman, weapon1).generate();\n\n    const player2 = new Player(\"Cap America\", capShield, weapon0, player1.id).generate();\n\n    Game.generateMap();\n\n    // console.log(player1, player2)\n\n    const game = new Game([player1, player2]);\n\n    game.newGame();\n\n    const wDetails = [\n        { name: \"Space\", damage: 10 },\n        { name: \"Power\", damage: 10 },\n        { name: \"Soul\", damage: 20 },\n        { name: \"Gauntlet\", damage: 30 },\n    ];\n\n    $(\"#legend\").html(\"<div></div>\");\n\n    for (let i = 0; i < weapons.length; i++) {\n        $(\"#legend > div\").append(`\n    <div>\n    <span>${wDetails[i].name}</span>\n      <img src=${weapons[i]} alt=\"\" />\n      <span>${wDetails[i].damage}</span>\n    </div>`);\n    }\n};\n\n$(\"#newGame\").on(\"click\", newGame);\n$(\"#newGame2\").on(\"click\", newGame);\n\n$(\"#rules\").on(\"click\", () => {\n    $(\"#rulesModal\").addClass(\"open\");\n});\n$(\"#closeRules\").on(\"click\", () => {\n    $(\"#rulesModal\").removeClass(\"open\");\n});\n"]}